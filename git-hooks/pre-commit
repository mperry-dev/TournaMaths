#!/bin/bash

############################## Terraform ##############################
# List all Terraform files that have been changed in the current commit
changed_tf_files=$(git diff --cached --name-only -- '*.tf')
terraform_fmt_exit=0 # Initial value unless updated below is that no files to change

# Run terraform fmt on the changed Terraform files, if any
if [ -n "$changed_tf_files" ]; then
  # Gives error code if found linting issue, without making changes
  terraform fmt -check -list=false $changed_tf_files
  terraform_fmt_exit=$?
  if [ $terraform_fmt_exit -ne 0 ]; then
    echo "Doing Terraform linting."
    # Actually make the changes now, and list changed files
    terraform fmt $changed_tf_files
  else
    echo "No Terraform files changed."
  fi
else
  echo "No Terraform files changed."
fi

############################## Java ##############################
# List all Java files that have been changed in the current commit, that haven't been deleted.
changed_java_files=$(git diff --cached --name-only -- '*.java' | xargs -I {} sh -c 'test -e {} && echo {}')
formatted_java_files=() # Files modified during linting

# Run google-java-format on the changed Java files, if any
if [ -n "$changed_java_files" ]; then
  # Check if there's any files which are changed when running formatting
  # Create a temporary file to store backups of files we lint
  temp_file_backup=$(mktemp)

  # Do the linting, store changed files
  for file in $changed_java_files; do
    cat "$file" > "$temp_file_backup" # Backup this file

    google-java-format -i "$file"
    if ! diff -q "$file" "$temp_file_backup" > /dev/null; then
        # Linting made changes, so storing the filename in array
        formatted_java_files+=("$file")
    fi
  done

  if [ ${#formatted_java_files[@]} -ne 0 ]; then
    # Print out the changed files. Saying doing Java linting is a bit of a fib, since formatting has already been done - doing it this way for consistency with other messages.
    echo "Doing Java linting."
    for file in "${formatted_java_files[@]}"; do
      echo "$file"  # List the file
    done
  fi

  rm -f "$temp_file_backup" # Remove temporary file
else
  echo "No Java files changed."
fi

############################## JavaScript ##############################

# List all JavaScript files that have been changed in the current commit
changed_js_files=$(git diff --cached --name-only -- '*.js')

eslint_exit=0 # Initial value
prettier_exit=0 # Initial value

# Run ESLint on the changed JavaScript files, if any
if [ -n "$changed_js_files" ]; then
  eslint $changed_js_files > /dev/null 2>&1 # Silence output, redo linting with fix option
  eslint_exit=$?
  if [ $eslint_exit -ne 0 ]; then
    echo "Doing JavaScript linting/formatting (ESLint)."
    eslint --fix src/main/resources/static/js/ # Actually fix problems where possible
  else
    echo "No JavaScript files changed (ESLint)."
  fi
else
  echo "No JavaScript files changed (ESLint)."
fi

# Run Prettier on the changed JavaScript files, if any
if [ -n "$changed_js_files" ]; then
  prettier --log-level silent
  prettier --check $changed_js_files
  prettier_exit=$?
  if [ $prettier_exit -ne 0 ]; then
    echo "Doing JavaScript formatting (Prettier)."
    prettier --log-level log
    prettier --write $changed_js_files
  else
    echo "No JavaScript files changed (Prettier)."
  fi
else
  echo "No JavaScript files changed (Prettier)."
fi

############################## Set the exit code of this script (to determine whether commit goes through)  ##############################

# Exit with an error code if either of the commands failed, so commit is rejected
# For Java, checking here that Java files changed
if [ $terraform_fmt_exit -ne 0 ] || [ ${#formatted_java_files[@]} -ne 0 ] || [ $eslint_exit -ne 0 ] || [ $prettier_exit -ne 0 ]; then
  exit 1
fi

# Continue with the commit if both commands succeeded
exit 0

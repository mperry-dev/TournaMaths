name: 'Deploy to prod'

on:
  workflow_dispatch:

concurrency:
  group: deploy
  cancel-in-progress: false

env:
  TERRAFORM_PATH: 'infrastructure'

jobs:
  build-application:
    name: 'Build application'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '20'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload JAR file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: tournamaths-jar
          path: target/tournamaths-1.0.jar

      - name: Update commit status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            STATE="success"
          else
            STATE="failure"
          fi

          echo "STATE=$STATE for this job performed on COMMIT=${{ github.sha }}"

          curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          -d "{\"state\": \"$STATE\", \"context\": \"Deployment\", \"description\": \"Build application result\", \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"

  deploy-infrastructure:
    name: 'Deploy infrastructure to prod'
    runs-on: ubuntu-latest

    steps:
      # NOTE - uncomment this if start giving coding access to other people (note have branch protection rule for main)
      # Have branch protection rule for main branch, so should only allow deployment from that to protect production integrity
      #- name: Only allow deployment from main branch
      #  run: |
      #    if [[ "${{ github.ref }}" != "ref/heads/main" ]]; then
      #      echo "Should only run deployment from main branch, but github.ref=${{ github.ref }}"
      #      exit 1
      #    fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_PATH }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_PATH }}
        run: terraform plan

      - name: Terraform Apply
        # Checking that actor is owner would be better than only allowing my account to run deployments, but this is just a pet project
        if: github.actor == 'mperry-dev'
        working-directory: ${{ env.TERRAFORM_PATH }}
        run: terraform apply -auto-approve

      # Note need to enable "read and write permissions" in https://github.com/mperry-dev/TournaMaths/settings/actions for this
      - name: Update commit status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            STATE="success"
          else
            STATE="failure"
          fi

          echo "STATE=$STATE for this job performed on COMMIT=${{ github.sha }}"

          curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          -d "{\"state\": \"$STATE\", \"context\": \"Deployment\", \"description\": \"Infrastructure deployment result\", \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"

  deploy-application:
    name: 'Deploy application to prod'
    runs-on: ubuntu-latest
    needs: [build-application, deploy-infrastructure]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: tournamaths-jar
          path: target

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Upload to S3
        run: aws s3 cp target/tournamaths-1.0.jar s3://tournamaths/tournamaths.jar
  
      - name: Deploy to AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name tournamaths-app \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name tournamaths-deployment-group \
            --description "TournaMaths deployment" \
            --s3-location bucket=tournamaths,bundleType=jar,key=tournamaths.jar

      - name: Update commit status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            STATE="success"
          else
            STATE="failure"
          fi

          echo "STATE=$STATE for this job performed on COMMIT=${{ github.sha }}"

          curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          -d "{\"state\": \"$STATE\", \"context\": \"Deployment\", \"description\": \"Application deployment result\", \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"
